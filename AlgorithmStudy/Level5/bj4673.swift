//  Created by 김상민 on 2022/07/07.
//
// 4673
/*
 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.
 
 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다.
 
 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.
 
 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
 
 n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다.
 
 생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97
 
 10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
 
 출력:
 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.
 */
/*
 풀이 과정:
 답에 무슨 규칙이 있을까 계속 찾아보다가 두배에서 전걸 빼면 나오는 줄 알고 했다가 실패했다. 자리수가 늘어날 때에는 규칙이 통하지 않아서 뭔가 있나 싶다가도 결국엔
 모든 d(n)을 구하고 아닌 것을 출력하는 식으로 풀이를 진행했다.
 그리고 n하나로 모든 배열을 구할 수 있게 되었는게 그건 아니었다. n하나로 무한의 배열을 만들 수는 있지만 n마다 다른 d(n)이 존재하고 이 모든 d(n)이 한 배열 안에 있는 것은 아니므로
 이를 주의해야 했다.
 
 */
import Foundation

func printSelfNumber() {
    var notSelfNums = Set<Int>()
    
    for n in 1...10000 {
        var notSelfNum = n
        var num = n
        while num > 0 {
            notSelfNum += num % 10
            num /= 10
        }
        notSelfNums.insert(notSelfNum)
    }
    
    for n in 1...10000 {
        if !notSelfNums.contains(n) {
            print(n)
        }
    }
    
}

printSelfNumber()


